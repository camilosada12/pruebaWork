// <auto-generated />
using Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.Pedidos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "Primer pedido registrado",
                            name = "pedido 1 "
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "Segundo pedido registrado",
                            name = "pedido 2"
                        },
                        new
                        {
                            id = 3,
                            active = true,
                            description = "Tercer pedido registrado",
                            name = "pedido 3"
                        },
                        new
                        {
                            id = 4,
                            active = true,
                            description = "cuarto pedido registrado",
                            name = "pedido 4"
                        });
                });

            modelBuilder.Entity("Entity.Model.Pizzas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "Pizza clásica con salsa de tomate, mozzarella y albahaca",
                            name = "Margherita"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "Pizza con pepperoni picante y extra queso mozzarella",
                            name = "Pepperoni"
                        },
                        new
                        {
                            id = 3,
                            active = true,
                            description = "Pizza con jamón, piña y queso",
                            name = "Hawaiana"
                        },
                        new
                        {
                            id = 4,
                            active = true,
                            description = "Mezcla de mozzarella, cheddar, azul y parmesano",
                            name = "Cuatro Quesos"
                        },
                        new
                        {
                            id = 5,
                            active = true,
                            description = "Pizza con champiñones, pimientos, cebolla y aceitunas",
                            name = "Vegetariana"
                        },
                        new
                        {
                            id = 6,
                            active = true,
                            description = "Pizza con carne, jalapeños y salsa picante",
                            name = "Mexicana"
                        });
                });

            modelBuilder.Entity("Entity.Model.RolFormPermissions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("formid")
                        .HasColumnType("int");

                    b.Property<int>("permissionid")
                        .HasColumnType("int");

                    b.Property<int>("rolid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("formid");

                    b.HasIndex("permissionid");

                    b.HasIndex("rolid");

                    b.ToTable("RolFormPermissions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = false,
                            formid = 1,
                            permissionid = 1,
                            rolid = 1
                        },
                        new
                        {
                            id = 2,
                            active = false,
                            formid = 2,
                            permissionid = 2,
                            rolid = 1
                        },
                        new
                        {
                            id = 3,
                            active = false,
                            formid = 3,
                            permissionid = 2,
                            rolid = 1
                        },
                        new
                        {
                            id = 4,
                            active = false,
                            formid = 4,
                            permissionid = 1,
                            rolid = 2
                        },
                        new
                        {
                            id = 5,
                            active = false,
                            formid = 5,
                            permissionid = 2,
                            rolid = 2
                        },
                        new
                        {
                            id = 6,
                            active = false,
                            formid = 5,
                            permissionid = 3,
                            rolid = 2
                        },
                        new
                        {
                            id = 7,
                            active = false,
                            formid = 6,
                            permissionid = 2,
                            rolid = 3
                        });
                });

            modelBuilder.Entity("Entity.Model.RolUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("rolid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("rolid");

                    b.HasIndex("userid");

                    b.ToTable("RolUsers");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = false,
                            rolid = 1,
                            userid = 1
                        },
                        new
                        {
                            id = 2,
                            active = false,
                            rolid = 2,
                            userid = 2
                        },
                        new
                        {
                            id = 3,
                            active = false,
                            rolid = 3,
                            userid = 3
                        });
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = false,
                            password = "admin123",
                            username = "admin"
                        },
                        new
                        {
                            id = 2,
                            active = false,
                            password = "asistente123",
                            username = "asistente"
                        },
                        new
                        {
                            id = 3,
                            active = false,
                            password = "pizzero123",
                            username = "pizzero"
                        });
                });

            modelBuilder.Entity("Entity.Model.rol", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "Administrador general",
                            name = "Administrador"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "Asistente de pedidos",
                            name = "Asistente"
                        },
                        new
                        {
                            id = 3,
                            active = true,
                            description = "Encargado de preparar pizzas",
                            name = "Pizzero"
                        });
                });

            modelBuilder.Entity("Entity.Model.RolFormPermissions", b =>
                {
                    b.HasOne("Entity.Model.Pizzas", "Form")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("formid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Pedidos", "Permission")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("permissionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.rol", "Rol")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("rolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity.Model.RolUser", b =>
                {
                    b.HasOne("Entity.Model.rol", "Rol")
                        .WithMany("RolUser")
                        .HasForeignKey("rolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Pedidos", b =>
                {
                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity.Model.Pizzas", b =>
                {
                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Entity.Model.rol", b =>
                {
                    b.Navigation("RolFormPermission");

                    b.Navigation("RolUser");
                });
#pragma warning restore 612, 618
        }
    }
}
